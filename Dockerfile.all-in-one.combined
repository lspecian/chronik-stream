# All-in-one Chronik Stream using pre-built service images
# This approach combines already compiled binaries from service images

# Use the ingest image as base since it has the Kafka server
FROM ghcr.io/lspecian/chronik-stream-ingest:latest AS ingest

# Get the controller binary
FROM ghcr.io/lspecian/chronik-stream-controller:latest AS controller

# Get the search binary  
FROM ghcr.io/lspecian/chronik-stream-search:latest AS search

# Get the admin binary
FROM ghcr.io/lspecian/chronik-stream-admin:latest AS admin

# Build the all-in-one coordinator
FROM rust:latest AS coordinator-builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    clang \
    libclang-dev \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/*

# Copy only the all-in-one package source
COPY Cargo.toml Cargo.lock ./
COPY crates/chronik-all-in-one ./crates/chronik-all-in-one/
COPY crates/chronik-common ./crates/chronik-common/
COPY crates/chronik-protocol ./crates/chronik-protocol/
COPY crates/chronik-storage ./crates/chronik-storage/

# Copy other required crates for workspace
COPY crates/chronik-ingest/Cargo.toml ./crates/chronik-ingest/
COPY crates/chronik-controller/Cargo.toml ./crates/chronik-controller/
COPY crates/chronik-search/Cargo.toml ./crates/chronik-search/
COPY crates/chronik-admin/Cargo.toml ./crates/chronik-admin/
COPY crates/chronik-auth/Cargo.toml ./crates/chronik-auth/
COPY crates/chronik-backup/Cargo.toml ./crates/chronik-backup/
COPY crates/chronik-benchmarks/Cargo.toml ./crates/chronik-benchmarks/
COPY crates/chronik-cli/Cargo.toml ./crates/chronik-cli/
COPY crates/chronik-config/Cargo.toml ./crates/chronik-config/
COPY crates/chronik-janitor/Cargo.toml ./crates/chronik-janitor/
COPY crates/chronik-monitoring/Cargo.toml ./crates/chronik-monitoring/
COPY crates/chronik-operator/Cargo.toml ./crates/chronik-operator/
COPY crates/chronik-query/Cargo.toml ./crates/chronik-query/
COPY tests/Cargo.toml ./tests/

# Create dummy files for other crates
RUN for dir in crates/*/; do \
        if [ ! -d "${dir}src" ]; then \
            mkdir -p "${dir}src" && \
            echo "" > "${dir}src/lib.rs"; \
        fi; \
    done && \
    mkdir -p tests/src && echo "" > tests/src/lib.rs && \
    # Create dummy benchmark files
    mkdir -p crates/chronik-benchmarks/benches && \
    echo "fn main() {}" > crates/chronik-benchmarks/benches/produce_throughput.rs && \
    echo "fn main() {}" > crates/chronik-benchmarks/benches/search_latency.rs && \
    echo "fn main() {}" > crates/chronik-benchmarks/benches/end_to_end.rs && \
    mkdir -p crates/chronik-protocol/benches && \
    echo "fn main() {}" > crates/chronik-protocol/benches/protocol_bench.rs && \
    mkdir -p crates/chronik-search/benches && \
    echo "fn main() {}" > crates/chronik-search/benches/realtime_indexing_bench.rs && \
    mkdir -p crates/chronik-storage/benches && \
    echo "fn main() {}" > crates/chronik-storage/benches/segment_comparison.rs

# Build only the all-in-one coordinator
RUN cargo build --release --bin chronik --package chronik-all-in-one

# Final runtime image combining everything
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Create user and directories
RUN useradd -m -u 1000 chronik && \
    mkdir -p /data /var/log/supervisor && \
    chown -R chronik:chronik /data /var/log/supervisor

# Copy binaries from each service image
COPY --from=ingest /usr/local/bin/chronik-ingest /usr/local/bin/
COPY --from=controller /usr/local/bin/chronik-controller /usr/local/bin/
COPY --from=search /usr/local/bin/chronik-search /usr/local/bin/
COPY --from=admin /usr/local/bin/chronik-admin /usr/local/bin/
COPY --from=coordinator-builder /app/target/release/chronik /usr/local/bin/

# Create supervisor configuration
RUN cat > /etc/supervisor/conf.d/chronik.conf <<EOF
[supervisord]
nodaemon=true
user=chronik

[program:controller]
command=/usr/local/bin/chronik-controller
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/controller.err.log
stdout_logfile=/var/log/supervisor/controller.out.log
environment=RUST_LOG="info"

[program:ingest]
command=/usr/local/bin/chronik-ingest
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/ingest.err.log
stdout_logfile=/var/log/supervisor/ingest.out.log
environment=RUST_LOG="info",CONTROLLER_ADDR="localhost:9090"

[program:search]
command=/usr/local/bin/chronik-search
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/search.err.log
stdout_logfile=/var/log/supervisor/search.out.log
environment=RUST_LOG="info",INDEX_PATH="/data/index"

[program:admin]
command=/usr/local/bin/chronik-admin
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/admin.err.log
stdout_logfile=/var/log/supervisor/admin.out.log
environment=RUST_LOG="info",CONTROLLER_ENDPOINTS="localhost:9090"
EOF

# Alternative: Use the all-in-one binary if available
RUN cat > /usr/local/bin/start-chronik.sh <<'EOF'
#!/bin/bash
if [ "$USE_SUPERVISOR" = "true" ]; then
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/chronik.conf
else
    exec /usr/local/bin/chronik "$@"
fi
EOF
RUN chmod +x /usr/local/bin/start-chronik.sh

# Switch to non-root user
USER chronik

# Expose all ports
EXPOSE 9092 9090 9200 8080 3000

# Environment variables
ENV CHRONIK_DATA_DIR=/data
ENV USE_SUPERVISOR=false

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD chronik check || curl -f http://localhost:8080/health || exit 1

# Default to running the all-in-one binary
ENTRYPOINT ["/usr/local/bin/start-chronik.sh"]
CMD ["start"]

# Metadata
LABEL org.opencontainers.image.source="https://github.com/lspecian/chronik-stream"
LABEL org.opencontainers.image.description="All-in-one Chronik Stream combining all services"
LABEL org.opencontainers.image.licenses="MIT"