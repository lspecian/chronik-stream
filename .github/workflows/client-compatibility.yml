name: Kafka Client Compatibility Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily to catch any regressions
    - cron: '0 0 * * *'

jobs:
  client-compatibility:
    runs-on: ubuntu-latest
    
    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: --health-cmd "curl -f http://localhost:9000/minio/health/live" --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          protobuf-compiler \
          python3-pip \
          golang-go \
          default-jdk \
          maven \
          kafkacat
    
    - name: Install kafkactl
      run: |
        curl -L https://github.com/deviceinsight/kafkactl/releases/latest/download/kafkactl-linux-amd64.tar.gz \
          -o kafkactl.tar.gz
        tar xzf kafkactl.tar.gz
        sudo mv kafkactl /usr/local/bin/
        kafkactl version
    
    - name: Install Python dependencies
      run: |
        pip3 install confluent-kafka pytest
    
    - name: Build Chronik Stream
      run: cargo build --release
    
    - name: Start Chronik Stream
      run: |
        # Create MinIO bucket
        export AWS_ACCESS_KEY_ID=minioadmin
        export AWS_SECRET_ACCESS_KEY=minioadmin
        export AWS_ENDPOINT_URL=http://localhost:9000
        
        # Start controller
        ./target/release/chronik-controller &
        CONTROLLER_PID=$!
        
        # Start ingest nodes
        ./target/release/chronik-ingest --port 9092 &
        INGEST_PID=$!
        
        # Wait for services to start
        sleep 10
        
        # Save PIDs for cleanup
        echo $CONTROLLER_PID > controller.pid
        echo $INGEST_PID > ingest.pid
    
    - name: Run client compatibility tests
      run: |
        cd tests
        python3 test_real_clients.py
      env:
        BOOTSTRAP_SERVERS: localhost:9092
    
    - name: Generate compatibility report
      run: |
        cd tests
        python3 generate-compatibility-report.py \
          --bootstrap-servers localhost:9092 \
          --format both \
          --output compatibility-report
    
    - name: Upload compatibility report
      uses: actions/upload-artifact@v4
      with:
        name: compatibility-report
        path: |
          tests/compatibility-report.json
          tests/compatibility-report.md
    
    - name: Comment PR with compatibility report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('tests/compatibility-report.md', 'utf8');
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Kafka Client Compatibility Report')
          );
          
          const body = `## ðŸ§ª Kafka Client Compatibility Report\n\n${report}`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
    
    - name: Test with Docker clients
      run: |
        docker build -f tests/Dockerfile.client-tests -t chronik-client-tests tests/
        
        # Run tests in Docker container
        docker run --rm --network host chronik-client-tests bash -c "
          kafkactl get brokers --brokers localhost:9092
          echo 'Docker test' | kafkactl produce docker-test --brokers localhost:9092
          kafkactl consume docker-test --from-beginning --max-messages 1 --brokers localhost:9092
        "
    
    - name: Cleanup
      if: always()
      run: |
        if [ -f controller.pid ]; then kill $(cat controller.pid) || true; fi
        if [ -f ingest.pid ]; then kill $(cat ingest.pid) || true; fi