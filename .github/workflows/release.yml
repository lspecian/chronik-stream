name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.5.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: chronik-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: chronik-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: chronik-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: chronik-darwin-arm64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      
      - name: Build
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
            export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
          fi
          cargo build --release --target ${{ matrix.target }} --bin chronik
          
      - name: Package binary
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/chronik dist/
          cd dist
          tar czf ${{ matrix.artifact }}.tar.gz chronik
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist/${{ matrix.artifact }}.tar.gz

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    needs: [build-binaries, build-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Generate release notes
        id: notes
        run: |
          TAG="${{ github.event.inputs.tag || github.ref_name }}"
          echo "# Chronik Stream ${TAG}" > release-notes.md
          echo "" >> release-notes.md
          echo "## ðŸš€ Features" >> release-notes.md
          echo "" >> release-notes.md
          echo "- Complete Kafka protocol compatibility (v0-v9)" >> release-notes.md
          echo "- Fixed ApiVersions negotiation for all 19 supported APIs" >> release-notes.md
          echo "- Improved broker advertisement for client connectivity" >> release-notes.md
          echo "- Optimized CPU usage (reduced from 163% to 0% idle)" >> release-notes.md
          echo "- Full support for metadata, produce, fetch, and consumer group operations" >> release-notes.md
          echo "" >> release-notes.md
          echo "## ðŸ“¦ Docker Images" >> release-notes.md
          echo "" >> release-notes.md
          echo "Multi-architecture images available:" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo "docker pull ghcr.io/${{ github.repository }}:${TAG}" >> release-notes.md
          echo '```' >> release-notes.md
          echo "" >> release-notes.md
          echo "Supported architectures:" >> release-notes.md
          echo "- linux/amd64 (x86_64)" >> release-notes.md
          echo "- linux/arm64 (aarch64)" >> release-notes.md
          echo "" >> release-notes.md
          echo "## ðŸ“¥ Downloads" >> release-notes.md
          echo "" >> release-notes.md
          echo "Pre-built binaries are available below for:" >> release-notes.md
          echo "- Linux (x86_64, aarch64)" >> release-notes.md
          echo "- macOS (x86_64, Apple Silicon)" >> release-notes.md
          echo "" >> release-notes.md
          echo "## ðŸ”§ Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Docker" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo "docker run -d -p 9092:9092 ghcr.io/${{ github.repository }}:${TAG}" >> release-notes.md
          echo '```' >> release-notes.md
          echo "" >> release-notes.md
          echo "### Binary" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo "tar xzf chronik-linux-amd64.tar.gz" >> release-notes.md
          echo "./chronik --bind-addr 0.0.0.0:9092" >> release-notes.md
          echo '```' >> release-notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: ${{ github.event.inputs.tag || github.ref_name }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/*/*.tar.gz
