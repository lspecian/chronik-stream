name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.5.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CARGO_TERM_COLOR: always
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: "true"

jobs:
  # Build native binaries for releases
  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds using cross for proper musl static linking
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact: chronik-server-linux-amd64
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact: chronik-server-linux-arm64
            use_cross: true
          # macOS builds (native)
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: chronik-server-darwin-amd64
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: chronik-server-darwin-arm64
            use_cross: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install protoc (Linux)
        if: matrix.use_cross
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install protoc (macOS)
        if: "!matrix.use_cross"
        run: |
          brew install protobuf

      - name: Install cross (Linux builds)
        if: matrix.use_cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build with cross (Linux)
        if: matrix.use_cross
        env:
          RUSTC_WRAPPER: ""
        run: |
          cross build --release --target ${{ matrix.target }} --bin chronik-server --features raft

      - name: Build native (macOS)
        if: "!matrix.use_cross"
        run: |
          cargo build --release --target ${{ matrix.target }} --bin chronik-server --features raft
          
      - name: Package binary
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/chronik-server dist/
          cd dist
          tar -czf ${{ matrix.artifact }}.tar.gz chronik-server
          sha256sum ${{ matrix.artifact }}.tar.gz > ${{ matrix.artifact }}.tar.gz.sha256 || \
          shasum -a 256 ${{ matrix.artifact }}.tar.gz > ${{ matrix.artifact }}.tar.gz.sha256
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist/${{ matrix.artifact }}*
          retention-days: 7
      
      - name: Show sccache stats
        if: always()
        run: sccache --show-stats || true

  # Build optimized Docker images using Linux binaries
  docker:
    name: Build and Push Docker Images
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Linux binaries
        uses: actions/download-artifact@v4
        with:
          pattern: chronik-server-linux-*
          path: artifacts-download
      
      - name: Prepare artifacts for Docker
        run: |
          # Extract Linux binaries for Docker
          mkdir -p artifacts/linux/amd64
          mkdir -p artifacts/linux/arm64
          
          cd artifacts-download
          tar -xzf chronik-server-linux-amd64/chronik-server-linux-amd64.tar.gz -C ../artifacts/linux/amd64/
          tar -xzf chronik-server-linux-arm64/chronik-server-linux-arm64.tar.gz -C ../artifacts/linux/arm64/
          
          # Make binaries executable
          chmod +x ../artifacts/linux/*/chronik-server
          
          # Verify binaries
          ls -la ../artifacts/linux/*/
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image (optimized)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.binary
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}

  # Create GitHub release
  release:
    name: Create Release
    needs: [build-binaries, docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.sha256
          body: |
            ## Chronik Stream ${{ github.ref_name }}
            
            ### Installation
            
            #### Docker (Recommended)
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            #### Binary Downloads
            - Linux AMD64: `chronik-server-linux-amd64.tar.gz`
            - Linux ARM64: `chronik-server-linux-arm64.tar.gz`
            - macOS AMD64: `chronik-server-darwin-amd64.tar.gz`
            - macOS ARM64: `chronik-server-darwin-arm64.tar.gz`
            
            ### Verification
            All binaries include SHA256 checksums for verification.
            
            ### What's Changed
            See the full changelog below.
          generate_release_notes: true