name: Optimized Build and Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: "true"

jobs:
  # Detect which crates changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-crates: ${{ steps.changes.outputs.crates }}
      should-build: ${{ steps.changes.outputs.should-build }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect changed crates
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Get changed files
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            
            # Extract changed crates
            CHANGED_CRATES=$(echo "$CHANGED_FILES" | grep "^crates/" | cut -d/ -f2 | sort -u | tr '\n' ' ')
            
            if [ -n "$CHANGED_CRATES" ]; then
              echo "Changed crates: $CHANGED_CRATES"
              echo "crates=$CHANGED_CRATES" >> $GITHUB_OUTPUT
              echo "should-build=true" >> $GITHUB_OUTPUT
            else
              echo "No crate changes detected"
              echo "should-build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Building all for PR/tag"
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

  # Build Linux binaries
  build-binaries:
    needs: detect-changes
    if: needs.detect-changes.outputs.should-build == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            arch: amd64
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            arch: arm64
            runner: ubuntu-latest
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-target-
      
      - name: Install cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build binary
        run: |
          cross build --release --target ${{ matrix.target }} --bin chronik-server
      
      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/linux/${{ matrix.arch }}
          cp target/${{ matrix.target }}/release/chronik-server artifacts/linux/${{ matrix.arch }}/
          sha256sum artifacts/linux/${{ matrix.arch }}/chronik-server > artifacts/linux/${{ matrix.arch }}/chronik-server.sha256
          echo "${{ github.ref_name }}" > artifacts/linux/${{ matrix.arch }}/chronik-server.version
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chronik-server-${{ matrix.arch }}
          path: artifacts/linux/${{ matrix.arch }}/
          retention-days: 7
      
      - name: Show sccache stats
        run: sccache --show-stats

  # Build and push Docker images
  docker:
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts-download
      
      - name: Prepare artifacts directory
        run: |
          mkdir -p artifacts/linux
          cp -r artifacts-download/chronik-server-amd64 artifacts/linux/amd64
          cp -r artifacts-download/chronik-server-arm64 artifacts/linux/arm64
          ls -la artifacts/linux/*/
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/chronik-stream
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.binary
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/linux/amd64/chronik-server
            artifacts/linux/amd64/chronik-server.sha256
            artifacts/linux/arm64/chronik-server
            artifacts/linux/arm64/chronik-server.sha256
          generate_release_notes: true
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}