# Production-ready ChronikCluster example with all features
apiVersion: chronik.stream/v1alpha1
kind: ChronikCluster
metadata:
  name: chronik-production
  namespace: chronik-system
spec:
  # Cluster topology
  controllers: 5
  ingestNodes: 10
  searchNodes: 3
  
  # Storage configuration for S3
  storage:
    backend:
      s3:
        bucket: chronik-data-prod
        region: us-east-1
        endpoint: null  # Use default AWS endpoint
    size: 100Gi
    storageClass: gp3
    
  # Metastore configuration  
  metastore:
    database: Postgres
    connection:
      host: postgres-primary.databases.svc.cluster.local
      port: 5432
      database: chronik_prod
      credentialsSecret: chronik-postgres-credentials
      
  # Resource requirements with limits
  resources:
    controller:
      cpu: 2
      memory: 4Gi
      cpuLimit: 4
      memoryLimit: 8Gi
    ingest:
      cpu: 4
      memory: 8Gi
      cpuLimit: 8
      memoryLimit: 16Gi
    search:
      cpu: 8
      memory: 16Gi
      cpuLimit: 16
      memoryLimit: 32Gi
      
  # Container images
  image:
    controller: chronik/controller:v1.0.0
    ingest: chronik/ingest:v1.0.0
    search: chronik/search:v1.0.0
    pullPolicy: IfNotPresent
    pullSecrets:
      - dockerhub-secret
      
  # Monitoring configuration
  monitoring:
    prometheus: true
    tracing: true
    otlpEndpoint: http://otel-collector.observability.svc.cluster.local:4317
    
  # Network configuration
  network:
    serviceType: LoadBalancer
    loadBalancerSourceRanges:
      - 10.0.0.0/8
      - 172.16.0.0/12
    hostNetwork: false
    dnsPolicy: ClusterFirst
    
  # Security configuration
  security:
    tlsEnabled: true
    tlsSecret: chronik-tls
    mtlsEnabled: true
    podSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      runAsNonRoot: true
    containerSecurityContext:
      allowPrivilegeEscalation: false
      privileged: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1000
      
  # Autoscaling configuration
  autoscaling:
    controllers:
      minReplicas: 5
      maxReplicas: 10
      targetCpuUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
    ingestNodes:
      minReplicas: 10
      maxReplicas: 50
      targetCpuUtilizationPercentage: 70
    searchNodes:
      minReplicas: 3
      maxReplicas: 10
      targetCpuUtilizationPercentage: 75
      targetMemoryUtilizationPercentage: 75
      
  # Pod disruption budget
  podDisruptionBudget:
    minAvailable: 2
    
  # Pod annotations for monitoring
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
    
  # Pod labels
  podLabels:
    environment: production
    team: platform
    
  # Node selection
  nodeSelector:
    node.kubernetes.io/instance-type: m5.2xlarge
    dedicated: chronik
    
  # Tolerations for dedicated nodes
  tolerations:
    - key: dedicated
      operator: Equal
      value: chronik
      effect: NoSchedule
    - key: node.kubernetes.io/disk-pressure
      operator: Exists
      effect: NoSchedule
      tolerationSeconds: 300
      
  # Affinity rules
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: chronik-stream
          topologyKey: kubernetes.io/hostname