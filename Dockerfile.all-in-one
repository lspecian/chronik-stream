# syntax=docker/dockerfile:1.5
# Chronik Stream All-in-One - BuildKit optimized
# This Dockerfile uses BuildKit features for maximum performance

# Global ARGs for build configuration
ARG RUST_VERSION=1.80
ARG DEBIAN_VERSION=bookworm

# ============================================================================
# DEPENDENCY CACHE STAGE
# This stage caches compiled dependencies and rarely changes
# ============================================================================
FROM rust:${RUST_VERSION}-${DEBIAN_VERSION} AS dependencies

# Enable BuildKit cache mounts
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y \
    clang \
    libclang-dev \
    protobuf-compiler

WORKDIR /app

# Copy only files needed for dependency resolution
COPY Cargo.toml Cargo.lock ./
COPY crates ./crates/
COPY tests ./tests/

# Remove all source files, keeping only Cargo.toml files
RUN find crates -type f -name "*.rs" -delete && \
    find tests -type f -name "*.rs" -delete

# Create dummy source files for all crates
RUN for dir in crates/*/; do \
        mkdir -p "${dir}src" && \
        if [ "${dir}" = "crates/chronik-all-in-one/" ]; then \
            echo "fn main() {}" > "${dir}src/main.rs"; \
        else \
            echo "" > "${dir}src/lib.rs"; \
        fi; \
    done && \
    mkdir -p tests/src && echo "" > tests/src/lib.rs

# Build dependencies with cache mount for cargo
RUN --mount=type=cache,target=/usr/local/cargo/registry,sharing=locked \
    --mount=type=cache,target=/usr/local/cargo/git,sharing=locked \
    --mount=type=cache,target=/app/target,sharing=locked \
    cargo build --release --package chronik-all-in-one

# ============================================================================
# BUILDER STAGE
# This stage compiles the actual application
# ============================================================================
FROM rust:${RUST_VERSION}-${DEBIAN_VERSION} AS builder

# Install build dependencies with cache
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y \
    clang \
    libclang-dev \
    protobuf-compiler

WORKDIR /app

# Copy everything
COPY . .

# Copy pre-built dependencies from cache stage
COPY --from=dependencies /app/target target
COPY --from=dependencies /usr/local/cargo /usr/local/cargo

# Build the application with cache mounts
RUN --mount=type=cache,target=/usr/local/cargo/registry,sharing=locked \
    --mount=type=cache,target=/usr/local/cargo/git,sharing=locked \
    --mount=type=cache,target=/app/target,sharing=locked,id=target-final \
    cargo build --release --package chronik-all-in-one && \
    # Copy the binary out of the cache mount
    cp target/release/chronik /chronik

# ============================================================================
# RUNTIME STAGE
# Minimal final image
# ============================================================================
FROM debian:${DEBIAN_VERSION}-slim AS runtime

# Install runtime dependencies with cache
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 chronik && \
    mkdir -p /data && \
    chown chronik:chronik /data

# Copy binary from builder
COPY --from=builder /chronik /usr/local/bin/chronik

# Switch to non-root user
USER chronik

# Configuration
EXPOSE 9092 3000 9090
ENV CHRONIK_DATA_DIR=/data
VOLUME ["/data"]

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD chronik check || exit 1

# Run
ENTRYPOINT ["chronik"]
CMD ["start"]

# Metadata
LABEL org.opencontainers.image.source="https://github.com/lspecian/chronik-stream"
LABEL org.opencontainers.image.description="Chronik Stream - High-performance Kafka-compatible streaming"
LABEL org.opencontainers.image.licenses="MIT"