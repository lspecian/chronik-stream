syntax = "proto3";

package chronik.controller;

// Controller service for cluster coordination
service ControllerService {
    // Topic management
    rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse);
    rpc DeleteTopic(DeleteTopicRequest) returns (DeleteTopicResponse);
    rpc ListTopics(ListTopicsRequest) returns (ListTopicsResponse);
    
    // Consumer group management
    rpc JoinGroup(JoinGroupRequest) returns (JoinGroupResponse);
    rpc SyncGroup(SyncGroupRequest) returns (SyncGroupResponse);
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    rpc LeaveGroup(LeaveGroupRequest) returns (LeaveGroupResponse);
    rpc DescribeGroup(DescribeGroupRequest) returns (DescribeGroupResponse);
    rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse);
    
    // Offset management
    rpc CommitOffsets(CommitOffsetsRequest) returns (CommitOffsetsResponse);
    rpc FetchOffsets(FetchOffsetsRequest) returns (FetchOffsetsResponse);
    
    // Broker management
    rpc RegisterBroker(RegisterBrokerRequest) returns (RegisterBrokerResponse);
    rpc UnregisterBroker(UnregisterBrokerRequest) returns (UnregisterBrokerResponse);
    rpc ListBrokers(ListBrokersRequest) returns (ListBrokersResponse);
}

// Topic messages
message CreateTopicRequest {
    string name = 1;
    int32 partition_count = 2;
    int32 replication_factor = 3;
    map<string, string> configs = 4;
}

message CreateTopicResponse {
    bool success = 1;
    string error = 2;
}

message DeleteTopicRequest {
    string name = 1;
}

message DeleteTopicResponse {
    bool success = 1;
    string error = 2;
}

message ListTopicsRequest {
}

message ListTopicsResponse {
    repeated TopicInfo topics = 1;
}

message TopicInfo {
    string name = 1;
    int32 partition_count = 2;
    int32 replication_factor = 3;
    map<string, string> configs = 4;
}

// Consumer group messages
message JoinGroupRequest {
    string group_id = 1;
    string member_id = 2;
    string client_id = 3;
    string client_host = 4;
    int32 session_timeout_ms = 5;
    int32 rebalance_timeout_ms = 6;
    string protocol_type = 7;
    repeated GroupProtocol protocols = 8;
}

message GroupProtocol {
    string name = 1;
    bytes metadata = 2;
}

message JoinGroupResponse {
    int32 error_code = 1;
    int32 generation_id = 2;
    string protocol = 3;
    string leader_id = 4;
    string member_id = 5;
    repeated GroupMember members = 6;
}

message GroupMember {
    string member_id = 1;
    bytes metadata = 2;
}

message SyncGroupRequest {
    string group_id = 1;
    int32 generation_id = 2;
    string member_id = 3;
    repeated GroupAssignment assignments = 4;
}

message GroupAssignment {
    string member_id = 1;
    bytes assignment = 2;
}

message SyncGroupResponse {
    int32 error_code = 1;
    bytes assignment = 2;
}

message HeartbeatRequest {
    string group_id = 1;
    string member_id = 2;
    int32 generation_id = 3;
}

message HeartbeatResponse {
    int32 error_code = 1;
}

message LeaveGroupRequest {
    string group_id = 1;
    string member_id = 2;
}

message LeaveGroupResponse {
    int32 error_code = 1;
}

message DescribeGroupRequest {
    string group_id = 1;
}

message DescribeGroupResponse {
    int32 error_code = 1;
    string group_id = 2;
    string state = 3;
    string protocol_type = 4;
    string protocol = 5;
    repeated GroupMemberInfo members = 6;
}

message GroupMemberInfo {
    string member_id = 1;
    string client_id = 2;
    string client_host = 3;
    bytes metadata = 4;
    bytes assignment = 5;
}

message ListGroupsRequest {
}

message ListGroupsResponse {
    repeated GroupInfo groups = 1;
}

message GroupInfo {
    string group_id = 1;
    string protocol_type = 2;
    string state = 3;
}

// Offset messages
message CommitOffsetsRequest {
    string group_id = 1;
    int32 generation_id = 2;
    string member_id = 3;
    repeated TopicPartitionOffset offsets = 4;
}

message TopicPartitionOffset {
    string topic = 1;
    int32 partition = 2;
    int64 offset = 3;
    string metadata = 4;
}

message CommitOffsetsResponse {
    repeated PartitionOffsetResult results = 1;
}

message PartitionOffsetResult {
    string topic = 1;
    int32 partition = 2;
    int32 error_code = 3;
}

message FetchOffsetsRequest {
    string group_id = 1;
    repeated string topics = 2;
}

message FetchOffsetsResponse {
    repeated TopicPartitionOffset offsets = 1;
}

// Broker messages
message RegisterBrokerRequest {
    int32 broker_id = 1;
    string host = 2;
    int32 port = 3;
    string rack = 4;
}

message RegisterBrokerResponse {
    bool success = 1;
    string error = 2;
}

message UnregisterBrokerRequest {
    int32 broker_id = 1;
}

message UnregisterBrokerResponse {
    bool success = 1;
    string error = 2;
}

message ListBrokersRequest {
}

message ListBrokersResponse {
    repeated BrokerInfo brokers = 1;
}

message BrokerInfo {
    int32 broker_id = 1;
    string host = 2;
    int32 port = 3;
    string rack = 4;
}