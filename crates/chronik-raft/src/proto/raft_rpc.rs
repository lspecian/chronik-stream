// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `raft_rpc.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct StepResponse {
    // message fields
    pub success: bool,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StepResponse {
    fn default() -> &'a StepResponse {
        <StepResponse as ::protobuf::Message>::default_instance()
    }
}

impl StepResponse {
    pub fn new() -> StepResponse {
        ::std::default::Default::default()
    }

    // bool success = 1;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StepResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 2;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StepResponse {
        StepResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &StepResponse| { &m.success },
                |m: &mut StepResponse| { &mut m.success },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &StepResponse| { &m.error },
                |m: &mut StepResponse| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StepResponse>(
                "StepResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StepResponse {
        static instance: ::protobuf::rt::LazyV2<StepResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StepResponse::new)
    }
}

impl ::protobuf::Clear for StepResponse {
    fn clear(&mut self) {
        self.success = false;
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StepResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StepResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendEntriesRequest {
    // message fields
    pub term: u64,
    pub leader_id: u64,
    pub prev_log_index: u64,
    pub prev_log_term: u64,
    pub entries: ::protobuf::RepeatedField<LogEntry>,
    pub leader_commit: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppendEntriesRequest {
    fn default() -> &'a AppendEntriesRequest {
        <AppendEntriesRequest as ::protobuf::Message>::default_instance()
    }
}

impl AppendEntriesRequest {
    pub fn new() -> AppendEntriesRequest {
        ::std::default::Default::default()
    }

    // uint64 term = 1;


    pub fn get_term(&self) -> u64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    // uint64 leader_id = 2;


    pub fn get_leader_id(&self) -> u64 {
        self.leader_id
    }
    pub fn clear_leader_id(&mut self) {
        self.leader_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_leader_id(&mut self, v: u64) {
        self.leader_id = v;
    }

    // uint64 prev_log_index = 3;


    pub fn get_prev_log_index(&self) -> u64 {
        self.prev_log_index
    }
    pub fn clear_prev_log_index(&mut self) {
        self.prev_log_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_prev_log_index(&mut self, v: u64) {
        self.prev_log_index = v;
    }

    // uint64 prev_log_term = 4;


    pub fn get_prev_log_term(&self) -> u64 {
        self.prev_log_term
    }
    pub fn clear_prev_log_term(&mut self) {
        self.prev_log_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_prev_log_term(&mut self, v: u64) {
        self.prev_log_term = v;
    }

    // repeated .chronik.raft.LogEntry entries = 5;


    pub fn get_entries(&self) -> &[LogEntry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<LogEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<LogEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<LogEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    // uint64 leader_commit = 6;


    pub fn get_leader_commit(&self) -> u64 {
        self.leader_commit
    }
    pub fn clear_leader_commit(&mut self) {
        self.leader_commit = 0;
    }

    // Param is passed by value, moved
    pub fn set_leader_commit(&mut self, v: u64) {
        self.leader_commit = v;
    }
}

impl ::protobuf::Message for AppendEntriesRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.leader_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.prev_log_index = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.prev_log_term = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.leader_commit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.leader_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.leader_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prev_log_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.prev_log_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prev_log_term != 0 {
            my_size += ::protobuf::rt::value_size(4, self.prev_log_term, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.leader_commit != 0 {
            my_size += ::protobuf::rt::value_size(6, self.leader_commit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if self.leader_id != 0 {
            os.write_uint64(2, self.leader_id)?;
        }
        if self.prev_log_index != 0 {
            os.write_uint64(3, self.prev_log_index)?;
        }
        if self.prev_log_term != 0 {
            os.write_uint64(4, self.prev_log_term)?;
        }
        for v in &self.entries {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.leader_commit != 0 {
            os.write_uint64(6, self.leader_commit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendEntriesRequest {
        AppendEntriesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "term",
                |m: &AppendEntriesRequest| { &m.term },
                |m: &mut AppendEntriesRequest| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "leader_id",
                |m: &AppendEntriesRequest| { &m.leader_id },
                |m: &mut AppendEntriesRequest| { &mut m.leader_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "prev_log_index",
                |m: &AppendEntriesRequest| { &m.prev_log_index },
                |m: &mut AppendEntriesRequest| { &mut m.prev_log_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "prev_log_term",
                |m: &AppendEntriesRequest| { &m.prev_log_term },
                |m: &mut AppendEntriesRequest| { &mut m.prev_log_term },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogEntry>>(
                "entries",
                |m: &AppendEntriesRequest| { &m.entries },
                |m: &mut AppendEntriesRequest| { &mut m.entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "leader_commit",
                |m: &AppendEntriesRequest| { &m.leader_commit },
                |m: &mut AppendEntriesRequest| { &mut m.leader_commit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppendEntriesRequest>(
                "AppendEntriesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AppendEntriesRequest {
        static instance: ::protobuf::rt::LazyV2<AppendEntriesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AppendEntriesRequest::new)
    }
}

impl ::protobuf::Clear for AppendEntriesRequest {
    fn clear(&mut self) {
        self.term = 0;
        self.leader_id = 0;
        self.prev_log_index = 0;
        self.prev_log_term = 0;
        self.entries.clear();
        self.leader_commit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendEntriesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendEntriesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendEntriesResponse {
    // message fields
    pub term: u64,
    pub success: bool,
    pub conflict_index: u64,
    pub conflict_term: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppendEntriesResponse {
    fn default() -> &'a AppendEntriesResponse {
        <AppendEntriesResponse as ::protobuf::Message>::default_instance()
    }
}

impl AppendEntriesResponse {
    pub fn new() -> AppendEntriesResponse {
        ::std::default::Default::default()
    }

    // uint64 term = 1;


    pub fn get_term(&self) -> u64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    // bool success = 2;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }

    // uint64 conflict_index = 3;


    pub fn get_conflict_index(&self) -> u64 {
        self.conflict_index
    }
    pub fn clear_conflict_index(&mut self) {
        self.conflict_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_conflict_index(&mut self, v: u64) {
        self.conflict_index = v;
    }

    // uint64 conflict_term = 4;


    pub fn get_conflict_term(&self) -> u64 {
        self.conflict_term
    }
    pub fn clear_conflict_term(&mut self) {
        self.conflict_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_conflict_term(&mut self, v: u64) {
        self.conflict_term = v;
    }
}

impl ::protobuf::Message for AppendEntriesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.conflict_index = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.conflict_term = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.success != false {
            my_size += 2;
        }
        if self.conflict_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.conflict_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.conflict_term != 0 {
            my_size += ::protobuf::rt::value_size(4, self.conflict_term, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        if self.conflict_index != 0 {
            os.write_uint64(3, self.conflict_index)?;
        }
        if self.conflict_term != 0 {
            os.write_uint64(4, self.conflict_term)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendEntriesResponse {
        AppendEntriesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "term",
                |m: &AppendEntriesResponse| { &m.term },
                |m: &mut AppendEntriesResponse| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &AppendEntriesResponse| { &m.success },
                |m: &mut AppendEntriesResponse| { &mut m.success },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "conflict_index",
                |m: &AppendEntriesResponse| { &m.conflict_index },
                |m: &mut AppendEntriesResponse| { &mut m.conflict_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "conflict_term",
                |m: &AppendEntriesResponse| { &m.conflict_term },
                |m: &mut AppendEntriesResponse| { &mut m.conflict_term },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppendEntriesResponse>(
                "AppendEntriesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AppendEntriesResponse {
        static instance: ::protobuf::rt::LazyV2<AppendEntriesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AppendEntriesResponse::new)
    }
}

impl ::protobuf::Clear for AppendEntriesResponse {
    fn clear(&mut self) {
        self.term = 0;
        self.success = false;
        self.conflict_index = 0;
        self.conflict_term = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendEntriesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendEntriesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestVoteRequest {
    // message fields
    pub term: u64,
    pub candidate_id: u64,
    pub last_log_index: u64,
    pub last_log_term: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestVoteRequest {
    fn default() -> &'a RequestVoteRequest {
        <RequestVoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl RequestVoteRequest {
    pub fn new() -> RequestVoteRequest {
        ::std::default::Default::default()
    }

    // uint64 term = 1;


    pub fn get_term(&self) -> u64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    // uint64 candidate_id = 2;


    pub fn get_candidate_id(&self) -> u64 {
        self.candidate_id
    }
    pub fn clear_candidate_id(&mut self) {
        self.candidate_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_candidate_id(&mut self, v: u64) {
        self.candidate_id = v;
    }

    // uint64 last_log_index = 3;


    pub fn get_last_log_index(&self) -> u64 {
        self.last_log_index
    }
    pub fn clear_last_log_index(&mut self) {
        self.last_log_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_log_index(&mut self, v: u64) {
        self.last_log_index = v;
    }

    // uint64 last_log_term = 4;


    pub fn get_last_log_term(&self) -> u64 {
        self.last_log_term
    }
    pub fn clear_last_log_term(&mut self) {
        self.last_log_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_log_term(&mut self, v: u64) {
        self.last_log_term = v;
    }
}

impl ::protobuf::Message for RequestVoteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.candidate_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_log_index = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_log_term = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.candidate_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.candidate_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_log_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.last_log_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_log_term != 0 {
            my_size += ::protobuf::rt::value_size(4, self.last_log_term, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if self.candidate_id != 0 {
            os.write_uint64(2, self.candidate_id)?;
        }
        if self.last_log_index != 0 {
            os.write_uint64(3, self.last_log_index)?;
        }
        if self.last_log_term != 0 {
            os.write_uint64(4, self.last_log_term)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestVoteRequest {
        RequestVoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "term",
                |m: &RequestVoteRequest| { &m.term },
                |m: &mut RequestVoteRequest| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "candidate_id",
                |m: &RequestVoteRequest| { &m.candidate_id },
                |m: &mut RequestVoteRequest| { &mut m.candidate_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "last_log_index",
                |m: &RequestVoteRequest| { &m.last_log_index },
                |m: &mut RequestVoteRequest| { &mut m.last_log_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "last_log_term",
                |m: &RequestVoteRequest| { &m.last_log_term },
                |m: &mut RequestVoteRequest| { &mut m.last_log_term },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestVoteRequest>(
                "RequestVoteRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestVoteRequest {
        static instance: ::protobuf::rt::LazyV2<RequestVoteRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestVoteRequest::new)
    }
}

impl ::protobuf::Clear for RequestVoteRequest {
    fn clear(&mut self) {
        self.term = 0;
        self.candidate_id = 0;
        self.last_log_index = 0;
        self.last_log_term = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestVoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestVoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestVoteResponse {
    // message fields
    pub term: u64,
    pub vote_granted: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestVoteResponse {
    fn default() -> &'a RequestVoteResponse {
        <RequestVoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl RequestVoteResponse {
    pub fn new() -> RequestVoteResponse {
        ::std::default::Default::default()
    }

    // uint64 term = 1;


    pub fn get_term(&self) -> u64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    // bool vote_granted = 2;


    pub fn get_vote_granted(&self) -> bool {
        self.vote_granted
    }
    pub fn clear_vote_granted(&mut self) {
        self.vote_granted = false;
    }

    // Param is passed by value, moved
    pub fn set_vote_granted(&mut self, v: bool) {
        self.vote_granted = v;
    }
}

impl ::protobuf::Message for RequestVoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.vote_granted = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.vote_granted != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if self.vote_granted != false {
            os.write_bool(2, self.vote_granted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestVoteResponse {
        RequestVoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "term",
                |m: &RequestVoteResponse| { &m.term },
                |m: &mut RequestVoteResponse| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "vote_granted",
                |m: &RequestVoteResponse| { &m.vote_granted },
                |m: &mut RequestVoteResponse| { &mut m.vote_granted },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestVoteResponse>(
                "RequestVoteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestVoteResponse {
        static instance: ::protobuf::rt::LazyV2<RequestVoteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestVoteResponse::new)
    }
}

impl ::protobuf::Clear for RequestVoteResponse {
    fn clear(&mut self) {
        self.term = 0;
        self.vote_granted = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestVoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestVoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstallSnapshotRequest {
    // message fields
    pub term: u64,
    pub leader_id: u64,
    pub last_included_index: u64,
    pub last_included_term: u64,
    pub offset: u64,
    pub data: ::std::vec::Vec<u8>,
    pub done: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstallSnapshotRequest {
    fn default() -> &'a InstallSnapshotRequest {
        <InstallSnapshotRequest as ::protobuf::Message>::default_instance()
    }
}

impl InstallSnapshotRequest {
    pub fn new() -> InstallSnapshotRequest {
        ::std::default::Default::default()
    }

    // uint64 term = 1;


    pub fn get_term(&self) -> u64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    // uint64 leader_id = 2;


    pub fn get_leader_id(&self) -> u64 {
        self.leader_id
    }
    pub fn clear_leader_id(&mut self) {
        self.leader_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_leader_id(&mut self, v: u64) {
        self.leader_id = v;
    }

    // uint64 last_included_index = 3;


    pub fn get_last_included_index(&self) -> u64 {
        self.last_included_index
    }
    pub fn clear_last_included_index(&mut self) {
        self.last_included_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_included_index(&mut self, v: u64) {
        self.last_included_index = v;
    }

    // uint64 last_included_term = 4;


    pub fn get_last_included_term(&self) -> u64 {
        self.last_included_term
    }
    pub fn clear_last_included_term(&mut self) {
        self.last_included_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_included_term(&mut self, v: u64) {
        self.last_included_term = v;
    }

    // uint64 offset = 5;


    pub fn get_offset(&self) -> u64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u64) {
        self.offset = v;
    }

    // bytes data = 6;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // bool done = 7;


    pub fn get_done(&self) -> bool {
        self.done
    }
    pub fn clear_done(&mut self) {
        self.done = false;
    }

    // Param is passed by value, moved
    pub fn set_done(&mut self, v: bool) {
        self.done = v;
    }
}

impl ::protobuf::Message for InstallSnapshotRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.leader_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_included_index = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_included_term = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.offset = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.done = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.leader_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.leader_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_included_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.last_included_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_included_term != 0 {
            my_size += ::protobuf::rt::value_size(4, self.last_included_term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(5, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.data);
        }
        if self.done != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if self.leader_id != 0 {
            os.write_uint64(2, self.leader_id)?;
        }
        if self.last_included_index != 0 {
            os.write_uint64(3, self.last_included_index)?;
        }
        if self.last_included_term != 0 {
            os.write_uint64(4, self.last_included_term)?;
        }
        if self.offset != 0 {
            os.write_uint64(5, self.offset)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(6, &self.data)?;
        }
        if self.done != false {
            os.write_bool(7, self.done)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstallSnapshotRequest {
        InstallSnapshotRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "term",
                |m: &InstallSnapshotRequest| { &m.term },
                |m: &mut InstallSnapshotRequest| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "leader_id",
                |m: &InstallSnapshotRequest| { &m.leader_id },
                |m: &mut InstallSnapshotRequest| { &mut m.leader_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "last_included_index",
                |m: &InstallSnapshotRequest| { &m.last_included_index },
                |m: &mut InstallSnapshotRequest| { &mut m.last_included_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "last_included_term",
                |m: &InstallSnapshotRequest| { &m.last_included_term },
                |m: &mut InstallSnapshotRequest| { &mut m.last_included_term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "offset",
                |m: &InstallSnapshotRequest| { &m.offset },
                |m: &mut InstallSnapshotRequest| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &InstallSnapshotRequest| { &m.data },
                |m: &mut InstallSnapshotRequest| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "done",
                |m: &InstallSnapshotRequest| { &m.done },
                |m: &mut InstallSnapshotRequest| { &mut m.done },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InstallSnapshotRequest>(
                "InstallSnapshotRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InstallSnapshotRequest {
        static instance: ::protobuf::rt::LazyV2<InstallSnapshotRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InstallSnapshotRequest::new)
    }
}

impl ::protobuf::Clear for InstallSnapshotRequest {
    fn clear(&mut self) {
        self.term = 0;
        self.leader_id = 0;
        self.last_included_index = 0;
        self.last_included_term = 0;
        self.offset = 0;
        self.data.clear();
        self.done = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstallSnapshotRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstallSnapshotRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstallSnapshotResponse {
    // message fields
    pub term: u64,
    pub success: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstallSnapshotResponse {
    fn default() -> &'a InstallSnapshotResponse {
        <InstallSnapshotResponse as ::protobuf::Message>::default_instance()
    }
}

impl InstallSnapshotResponse {
    pub fn new() -> InstallSnapshotResponse {
        ::std::default::Default::default()
    }

    // uint64 term = 1;


    pub fn get_term(&self) -> u64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    // bool success = 2;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }
}

impl ::protobuf::Message for InstallSnapshotResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstallSnapshotResponse {
        InstallSnapshotResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "term",
                |m: &InstallSnapshotResponse| { &m.term },
                |m: &mut InstallSnapshotResponse| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &InstallSnapshotResponse| { &m.success },
                |m: &mut InstallSnapshotResponse| { &mut m.success },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InstallSnapshotResponse>(
                "InstallSnapshotResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InstallSnapshotResponse {
        static instance: ::protobuf::rt::LazyV2<InstallSnapshotResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InstallSnapshotResponse::new)
    }
}

impl ::protobuf::Clear for InstallSnapshotResponse {
    fn clear(&mut self) {
        self.term = 0;
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstallSnapshotResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstallSnapshotResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogEntry {
    // message fields
    pub term: u64,
    pub index: u64,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogEntry {
    fn default() -> &'a LogEntry {
        <LogEntry as ::protobuf::Message>::default_instance()
    }
}

impl LogEntry {
    pub fn new() -> LogEntry {
        ::std::default::Default::default()
    }

    // uint64 term = 1;


    pub fn get_term(&self) -> u64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    // uint64 index = 2;


    pub fn get_index(&self) -> u64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    // bytes data = 3;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LogEntry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if self.index != 0 {
            os.write_uint64(2, self.index)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogEntry {
        LogEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "term",
                |m: &LogEntry| { &m.term },
                |m: &mut LogEntry| { &mut m.term },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index",
                |m: &LogEntry| { &m.index },
                |m: &mut LogEntry| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &LogEntry| { &m.data },
                |m: &mut LogEntry| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogEntry>(
                "LogEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogEntry {
        static instance: ::protobuf::rt::LazyV2<LogEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogEntry::new)
    }
}

impl ::protobuf::Clear for LogEntry {
    fn clear(&mut self) {
        self.term = 0;
        self.index = 0;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RaftMessage {
    // message fields
    pub topic: ::std::string::String,
    pub partition: i32,
    pub message: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RaftMessage {
    fn default() -> &'a RaftMessage {
        <RaftMessage as ::protobuf::Message>::default_instance()
    }
}

impl RaftMessage {
    pub fn new() -> RaftMessage {
        ::std::default::Default::default()
    }

    // string topic = 1;


    pub fn get_topic(&self) -> &str {
        &self.topic
    }
    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // int32 partition = 2;


    pub fn get_partition(&self) -> i32 {
        self.partition
    }
    pub fn clear_partition(&mut self) {
        self.partition = 0;
    }

    // Param is passed by value, moved
    pub fn set_partition(&mut self, v: i32) {
        self.partition = v;
    }

    // bytes message = 3;


    pub fn get_message(&self) -> &[u8] {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.message, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RaftMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.topic)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.partition = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        if self.partition != 0 {
            my_size += ::protobuf::rt::value_size(2, self.partition, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        if self.partition != 0 {
            os.write_int32(2, self.partition)?;
        }
        if !self.message.is_empty() {
            os.write_bytes(3, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RaftMessage {
        RaftMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "topic",
                |m: &RaftMessage| { &m.topic },
                |m: &mut RaftMessage| { &mut m.topic },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "partition",
                |m: &RaftMessage| { &m.partition },
                |m: &mut RaftMessage| { &mut m.partition },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "message",
                |m: &RaftMessage| { &m.message },
                |m: &mut RaftMessage| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RaftMessage>(
                "RaftMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RaftMessage {
        static instance: ::protobuf::rt::LazyV2<RaftMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RaftMessage::new)
    }
}

impl ::protobuf::Clear for RaftMessage {
    fn clear(&mut self) {
        self.topic.clear();
        self.partition = 0;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RaftMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RaftMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadIndexRequest {
    // message fields
    pub read_id: u64,
    pub topic: ::std::string::String,
    pub partition: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadIndexRequest {
    fn default() -> &'a ReadIndexRequest {
        <ReadIndexRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadIndexRequest {
    pub fn new() -> ReadIndexRequest {
        ::std::default::Default::default()
    }

    // uint64 read_id = 1;


    pub fn get_read_id(&self) -> u64 {
        self.read_id
    }
    pub fn clear_read_id(&mut self) {
        self.read_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_read_id(&mut self, v: u64) {
        self.read_id = v;
    }

    // string topic = 2;


    pub fn get_topic(&self) -> &str {
        &self.topic
    }
    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // int32 partition = 3;


    pub fn get_partition(&self) -> i32 {
        self.partition
    }
    pub fn clear_partition(&mut self) {
        self.partition = 0;
    }

    // Param is passed by value, moved
    pub fn set_partition(&mut self, v: i32) {
        self.partition = v;
    }
}

impl ::protobuf::Message for ReadIndexRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.read_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.topic)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.partition = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.read_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.read_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.topic);
        }
        if self.partition != 0 {
            my_size += ::protobuf::rt::value_size(3, self.partition, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.read_id != 0 {
            os.write_uint64(1, self.read_id)?;
        }
        if !self.topic.is_empty() {
            os.write_string(2, &self.topic)?;
        }
        if self.partition != 0 {
            os.write_int32(3, self.partition)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadIndexRequest {
        ReadIndexRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "read_id",
                |m: &ReadIndexRequest| { &m.read_id },
                |m: &mut ReadIndexRequest| { &mut m.read_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "topic",
                |m: &ReadIndexRequest| { &m.topic },
                |m: &mut ReadIndexRequest| { &mut m.topic },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "partition",
                |m: &ReadIndexRequest| { &m.partition },
                |m: &mut ReadIndexRequest| { &mut m.partition },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadIndexRequest>(
                "ReadIndexRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadIndexRequest {
        static instance: ::protobuf::rt::LazyV2<ReadIndexRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadIndexRequest::new)
    }
}

impl ::protobuf::Clear for ReadIndexRequest {
    fn clear(&mut self) {
        self.read_id = 0;
        self.topic.clear();
        self.partition = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadIndexRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadIndexRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadIndexResponse {
    // message fields
    pub read_id: u64,
    pub commit_index: u64,
    pub is_leader: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadIndexResponse {
    fn default() -> &'a ReadIndexResponse {
        <ReadIndexResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadIndexResponse {
    pub fn new() -> ReadIndexResponse {
        ::std::default::Default::default()
    }

    // uint64 read_id = 1;


    pub fn get_read_id(&self) -> u64 {
        self.read_id
    }
    pub fn clear_read_id(&mut self) {
        self.read_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_read_id(&mut self, v: u64) {
        self.read_id = v;
    }

    // uint64 commit_index = 2;


    pub fn get_commit_index(&self) -> u64 {
        self.commit_index
    }
    pub fn clear_commit_index(&mut self) {
        self.commit_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_commit_index(&mut self, v: u64) {
        self.commit_index = v;
    }

    // bool is_leader = 3;


    pub fn get_is_leader(&self) -> bool {
        self.is_leader
    }
    pub fn clear_is_leader(&mut self) {
        self.is_leader = false;
    }

    // Param is passed by value, moved
    pub fn set_is_leader(&mut self, v: bool) {
        self.is_leader = v;
    }
}

impl ::protobuf::Message for ReadIndexResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.read_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.commit_index = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_leader = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.read_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.read_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.commit_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.commit_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_leader != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.read_id != 0 {
            os.write_uint64(1, self.read_id)?;
        }
        if self.commit_index != 0 {
            os.write_uint64(2, self.commit_index)?;
        }
        if self.is_leader != false {
            os.write_bool(3, self.is_leader)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadIndexResponse {
        ReadIndexResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "read_id",
                |m: &ReadIndexResponse| { &m.read_id },
                |m: &mut ReadIndexResponse| { &mut m.read_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "commit_index",
                |m: &ReadIndexResponse| { &m.commit_index },
                |m: &mut ReadIndexResponse| { &mut m.commit_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_leader",
                |m: &ReadIndexResponse| { &m.is_leader },
                |m: &mut ReadIndexResponse| { &mut m.is_leader },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadIndexResponse>(
                "ReadIndexResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadIndexResponse {
        static instance: ::protobuf::rt::LazyV2<ReadIndexResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadIndexResponse::new)
    }
}

impl ::protobuf::Clear for ReadIndexResponse {
    fn clear(&mut self) {
        self.read_id = 0;
        self.commit_index = 0;
        self.is_leader = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadIndexResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadIndexResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eraft_rpc.proto\x12\x0cchronik.raft\">\n\x0cStepResponse\x12\x18\n\
    \x07success\x18\x01\x20\x01(\x08R\x07success\x12\x14\n\x05error\x18\x02\
    \x20\x01(\tR\x05error\"\xe8\x01\n\x14AppendEntriesRequest\x12\x12\n\x04t\
    erm\x18\x01\x20\x01(\x04R\x04term\x12\x1b\n\tleader_id\x18\x02\x20\x01(\
    \x04R\x08leaderId\x12$\n\x0eprev_log_index\x18\x03\x20\x01(\x04R\x0cprev\
    LogIndex\x12\"\n\rprev_log_term\x18\x04\x20\x01(\x04R\x0bprevLogTerm\x12\
    0\n\x07entries\x18\x05\x20\x03(\x0b2\x16.chronik.raft.LogEntryR\x07entri\
    es\x12#\n\rleader_commit\x18\x06\x20\x01(\x04R\x0cleaderCommit\"\x91\x01\
    \n\x15AppendEntriesResponse\x12\x12\n\x04term\x18\x01\x20\x01(\x04R\x04t\
    erm\x12\x18\n\x07success\x18\x02\x20\x01(\x08R\x07success\x12%\n\x0econf\
    lict_index\x18\x03\x20\x01(\x04R\rconflictIndex\x12#\n\rconflict_term\
    \x18\x04\x20\x01(\x04R\x0cconflictTerm\"\x95\x01\n\x12RequestVoteRequest\
    \x12\x12\n\x04term\x18\x01\x20\x01(\x04R\x04term\x12!\n\x0ccandidate_id\
    \x18\x02\x20\x01(\x04R\x0bcandidateId\x12$\n\x0elast_log_index\x18\x03\
    \x20\x01(\x04R\x0clastLogIndex\x12\"\n\rlast_log_term\x18\x04\x20\x01(\
    \x04R\x0blastLogTerm\"L\n\x13RequestVoteResponse\x12\x12\n\x04term\x18\
    \x01\x20\x01(\x04R\x04term\x12!\n\x0cvote_granted\x18\x02\x20\x01(\x08R\
    \x0bvoteGranted\"\xe7\x01\n\x16InstallSnapshotRequest\x12\x12\n\x04term\
    \x18\x01\x20\x01(\x04R\x04term\x12\x1b\n\tleader_id\x18\x02\x20\x01(\x04\
    R\x08leaderId\x12.\n\x13last_included_index\x18\x03\x20\x01(\x04R\x11las\
    tIncludedIndex\x12,\n\x12last_included_term\x18\x04\x20\x01(\x04R\x10las\
    tIncludedTerm\x12\x16\n\x06offset\x18\x05\x20\x01(\x04R\x06offset\x12\
    \x12\n\x04data\x18\x06\x20\x01(\x0cR\x04data\x12\x12\n\x04done\x18\x07\
    \x20\x01(\x08R\x04done\"G\n\x17InstallSnapshotResponse\x12\x12\n\x04term\
    \x18\x01\x20\x01(\x04R\x04term\x12\x18\n\x07success\x18\x02\x20\x01(\x08\
    R\x07success\"H\n\x08LogEntry\x12\x12\n\x04term\x18\x01\x20\x01(\x04R\
    \x04term\x12\x14\n\x05index\x18\x02\x20\x01(\x04R\x05index\x12\x12\n\x04\
    data\x18\x03\x20\x01(\x0cR\x04data\"[\n\x0bRaftMessage\x12\x14\n\x05topi\
    c\x18\x01\x20\x01(\tR\x05topic\x12\x1c\n\tpartition\x18\x02\x20\x01(\x05\
    R\tpartition\x12\x18\n\x07message\x18\x03\x20\x01(\x0cR\x07message\"_\n\
    \x10ReadIndexRequest\x12\x17\n\x07read_id\x18\x01\x20\x01(\x04R\x06readI\
    d\x12\x14\n\x05topic\x18\x02\x20\x01(\tR\x05topic\x12\x1c\n\tpartition\
    \x18\x03\x20\x01(\x05R\tpartition\"l\n\x11ReadIndexResponse\x12\x17\n\
    \x07read_id\x18\x01\x20\x01(\x04R\x06readId\x12!\n\x0ccommit_index\x18\
    \x02\x20\x01(\x04R\x0bcommitIndex\x12\x1b\n\tis_leader\x18\x03\x20\x01(\
    \x08R\x08isLeader2\xaa\x03\n\x0bRaftService\x12X\n\rAppendEntries\x12\".\
    chronik.raft.AppendEntriesRequest\x1a#.chronik.raft.AppendEntriesRespons\
    e\x12R\n\x0bRequestVote\x12\x20.chronik.raft.RequestVoteRequest\x1a!.chr\
    onik.raft.RequestVoteResponse\x12`\n\x0fInstallSnapshot\x12$.chronik.raf\
    t.InstallSnapshotRequest\x1a%.chronik.raft.InstallSnapshotResponse(\x01\
    \x12L\n\tReadIndex\x12\x1e.chronik.raft.ReadIndexRequest\x1a\x1f.chronik\
    .raft.ReadIndexResponse\x12=\n\x04Step\x12\x19.chronik.raft.RaftMessage\
    \x1a\x1a.chronik.raft.StepResponseb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
