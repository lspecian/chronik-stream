syntax = "proto3";

package chronik.raft;

// RaftService provides gRPC endpoints for Raft consensus protocol.
service RaftService {
  // AppendEntries is called by the Raft leader to replicate log entries
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);

  // RequestVote is called by candidates to gather votes
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);

  // InstallSnapshot transfers snapshots from leader to followers
  rpc InstallSnapshot(stream InstallSnapshotRequest) returns (InstallSnapshotResponse);

  // ReadIndex enables linearizable reads from followers
  rpc ReadIndex(ReadIndexRequest) returns (ReadIndexResponse);

  // Step processes a Raft message (generic message passing)
  rpc Step(RaftMessage) returns (StepResponse);

  // StepBatch processes multiple Raft messages in a single call
  // OPTIMIZATION (v1.3.66): Reduces HTTP/2 frame overhead for batch operations
  rpc StepBatch(RaftMessageBatch) returns (StepBatchResponse);

  // ProposeMetadata proposes a metadata operation to the leader
  // Followers can use this to forward proposals to the leader
  rpc ProposeMetadata(ProposeMetadataRequest) returns (ProposeMetadataResponse);
}

message StepResponse {
  bool success = 1;
  string error = 2;
}

// OPTIMIZATION (v1.3.66): Batch message sending
message RaftMessageBatch {
  repeated RaftMessage messages = 1;
}

message StepBatchResponse {
  repeated StepResponse responses = 1;
}

// ProposeMetadata RPC (for metadata operations like broker registration)
message ProposeMetadataRequest {
  bytes data = 1;  // Serialized MetadataOp
}

message ProposeMetadataResponse {
  bool success = 1;
  string error = 2;
  uint64 index = 3;  // Raft log index where the operation was committed
}

// AppendEntries RPC
message AppendEntriesRequest {
  uint64 term = 1;
  uint64 leader_id = 2;
  uint64 prev_log_index = 3;
  uint64 prev_log_term = 4;
  repeated LogEntry entries = 5;
  uint64 leader_commit = 6;
}

message AppendEntriesResponse {
  uint64 term = 1;
  bool success = 2;
  uint64 conflict_index = 3;
  uint64 conflict_term = 4;
}

// RequestVote RPC
message RequestVoteRequest {
  uint64 term = 1;
  uint64 candidate_id = 2;
  uint64 last_log_index = 3;
  uint64 last_log_term = 4;
}

message RequestVoteResponse {
  uint64 term = 1;
  bool vote_granted = 2;
}

// InstallSnapshot RPC
message InstallSnapshotRequest {
  uint64 term = 1;
  uint64 leader_id = 2;
  uint64 last_included_index = 3;
  uint64 last_included_term = 4;
  uint64 offset = 5;
  bytes data = 6;
  bool done = 7;
}

message InstallSnapshotResponse {
  uint64 term = 1;
  bool success = 2;
}

// Log entry
message LogEntry {
  uint64 term = 1;
  uint64 index = 2;
  bytes data = 3;
}

// RaftMessage wraps tikv/raft Message for wire transfer
message RaftMessage {
  string topic = 1;
  int32 partition = 2;
  bytes message = 3;  // Serialized raft::Message
}

// ReadIndex RPC
message ReadIndexRequest {
  uint64 read_id = 1;
  string topic = 2;
  int32 partition = 3;
}

message ReadIndexResponse {
  uint64 read_id = 1;
  uint64 commit_index = 2;
  bool is_leader = 3;
}
